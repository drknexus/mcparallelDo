% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcparallelDo.R
\name{mcparallelDo}
\alias{mcparallelDo}
\title{mcparallelDo}
\usage{
mcparallelDo(code, targetValue, verbose = TRUE,
  targetEnvironment = .GlobalEnv)
}
\arguments{
\item{code}{The code to evaluate within a fork wrapped in {}}

\item{targetValue}{A character element indicating the variable that the result of that job should be assigned to targetEnvironment}

\item{verbose}{A boolean element; if TRUE the completion of the fork expr will be accompanied by a message}

\item{targetEnvironment}{The environment in which you want targetValue to be created}
}
\description{
This function creates a fork, evaluates a segment of code evaluated in the fork, and the result 
of the fork returned in a variable named targetValue in the targetEnvironment.
If there is an error in the code, the returned variable will be a try-error.
These effects are accomplished via the automatic creation and destruction of a taskCallback.  So, the result in targetValue will only occur after some other R command is issued.
}
\examples{
## Create data
data(ToothGrowth)
## Trigger mcparallelDo to perform analysis on a fork
mcparallelDo({glm(len ~ supp * dose, data=ToothGrowth)},"interactionPredictorModel")
## Do other things
binaryPredictorModel <- glm(len ~ supp, data=ToothGrowth)
gaussianPredictorModel <- glm(len ~ dose, data=ToothGrowth)
## The result from mcparallelDo returns in your targetEnvironment, 
## e.g. .GlobalEnv, when it is complete with a message (by default)
summary(interactionPredictorModel)
}

